:ruby
  # :alias => "validation-1.1", :title => "AJAX model validation"

%h1
  Model Validation via AJAX
= meta_box :topics => "helpers", :branch => "validation", :versions => ["1.1"]

:textile
  In the #{page_link "last chapter", "using-states-1.1"} we successfully separated the tweet form from the list. It's time to add *form validations*  - we should display an error message if the tweet text is empty.
  
  h2. GUI and models
  
  #{img "model-validation.png", :class => :right}
  
  Almost *every form has a backing model* it is connected to. Whereas the form is the model's GUI counterpart collecting input, the models job is to validate and save this data.
  
  When it comes to *wiring presentation to models*, small fine-grained widgets strike again.
  
  
  h2. Validation in models

  First, we setup some constraints.
  
= code "app/models/tweet.rb", :tag => "validation-head", :lines => 1..2

:textile
  h2. Using form helpers
  
  In the next step we use Rails' form helpers for setting up the input field quickly.
  
= code "app/widgets/twitter/form.haml", :tag => "validation-head"

:textile
  The @#form_for@ does all the work for us (line 4). When clicking the "Tweet!" button, the form is submitted and triggers a @:submit@ event in Rails.
  
  Errors from validation are showed with @error_messages@ (line 6).
  
.info
  :textile
    Notice how you can use Rails *helpers* in widget views. If you need a special helper that's not around automatically, use @Apotomo::Widget.helper@ method, which Cells gives us.


:textile
  h2. Processing the input
  
  The @:submit@ event is catched by the twitter widget. Remember how we set up the observer?
  
= code "app/widgets/twitter_widget.rb", :tag => "validation-head", :lines => 1..2

:textile
  Right, we had that @responds_to_event@ statement. It simply invokes @#process_tweet@.
  
  To validate the input we have to change this processing state a bit.

= code "app/widgets/twitter_widget.rb", :tag => "validation-head", :lines => 9..14

:textile
  Using @#update_attributes@ we let the model handle the validation and saving (line 10-11).
  
  After validating we re-render the main @display@ view and send it back. This will redraw the (hopefully) updated tweets list and eventually show an error message.  
  
  h2. Separation of Concerns?
  
  When playing around with the current state of our widget you may notice that the entire tweets list is _reloaded_ even when we want to display a validation error, only. Since we're rendering @display@ at the end of @#process_tweet@ we instruct a total re-rendering.
  
  This is not what we want.
  
  Why not tear apart the complex twitter widget into a container and a form? We will #{page_link "learn just that", "namespacing-1.1"} in the next chapters.
