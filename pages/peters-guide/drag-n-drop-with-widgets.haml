:ruby
  # :alias => "dragndrop"

- @page_title = "Drag&amp;Drop with widgets" 

%h1
  Drag&Drop with widgets
  = page_link "2.3", 'dragndrop-2.3', :class => :version
  = page_link "3.0", 'dragndrop', :class => :version
  = page_link "apotomo-1.0", 'dragndrop_10', :class => :version

:textile
  In the #{page_link "previous lesson", "introduction"} we covered a simple tweeter. Now what if we'd like to dump an item? Besides that twitter doesn't allow deleting (do they?), let's start writing a trashbin widget.

= img "dragndrop.png"

:textile
  When dropping an item the bin widget deletes it from the database. To stay in sync with our model, the list should also redraw. You'll learn how to do that using *event triggering* in this lesson.

  h2. Dragging items
  
  Drag&amp;Drop with JavaScript is well done in ["jQuery UI":http://jqueryui.com/demos/draggable/]. We need to include the new JS lib in our project.
  
= code "app/views/layouts/application.html.haml", :tag => "dragndrop-4"
=# diff "app/views/layouts/application.html.haml", :tag_a => "v1", :tag_b => "v2"

:textile
  Next, the listed items have to be draggable.
  
= code "app/widgets/twitter/display.html.haml", :tag => "dragndrop-4", :language => :haml

:textile
  This happens in line 23 using the ["Draggable API":http://jqueryui.com/demos/draggable/].
  
  
  h2. Creating the trashbin widget
  
  The bin widget is just a generator away.

:coderay
  #!bash
  $ rails generate apotomo:widget trashbin display -e haml
      exists  app/widgets/
      create  app/widgets/trashbin
      exists  test/widgets
      create  app/widgets/trashbin_widget.rb
      create  app/widgets/trashbin_widget/display.html.haml
      create  test/widgets/trashbin_widget_test.rb

:textile
  The @TrashbinWidget@ is bloody simple.
  
= code "app/widgets/trashbin_widget.rb", :tag => "dragndrop-4"

:textile
  Our standard view draws the bin image (that I've stolen from somewhere).

= code "app/widgets/trashbin/display.html.haml", :tag => "dragndrop-4", :language => :haml

:textile
  In line 5 we define the image from line 1 as ["Droppable":http://jqueryui.com/demos/droppable/].
  
  On drop, we send an AJAX request to the widget's @:trash@ event url appending the dropped item's id.
  
  h2. Catching the dropped
  
  Remember that the trashbin widget handles @trash@ events.
  
= code "app/widgets/trashbin_widget.rb", :tag => "dragndrop-4", :lines => (1..2)

:textile
  Simply put, when the bin sees a @trash@ event, it will invoke its @trash@ state. Notice how I can omit the @:with => ...@ portion if the names of event and triggered method are equal.

= code "app/widgets/trashbin_widget.rb", :tag => "dragndrop-4", :lines => (8..13)

:textile
  In line 12 we *update the current widget's div on the page* with the @display@ view.
  
  
  h2. Triggering events
  
  What's that @trigger@ statement in line 10?
  
  Well, we simply inform the outer world that we altered the tweets table - since we ruthlessly deleted an item.
  
  h2. Bubbling events 
  
  According to Apotomo's bubbling event concept, the @tweetDeleted@ event will bubble up to @root@. Why not instruct the list widget to catch it and update itself?
  
= code "app/widgets/twitter_widget.rb", :tag => "dragndrop-4"

:textile
  We just add the @redraw@ state (line 16) which invokes @display@ and replaces the widget content in the browser (line 17).
  
  Since events bubble up, we need to attach an event handler to root. That can be done in the controller.
  
= code "app/controllers/dashboard_controller.rb", :tag => "dragndrop-4"

:textile
  Line 7 instructs @root@ to call updating on our twitter widget when encountering the respective event.
  
  However, putting observer instructions in the controller is not very clean and breaks widget encapsing, since the controller knows details about the widgets' internals.
  
  There are two ways to make this suck less.

  * Have a container that wraps both widgets.
  * Use the @after_add@ hook to add an observer.
  
  Both approaches use Apotomo's #{page_link "event bubbling", "bubbling"}.
