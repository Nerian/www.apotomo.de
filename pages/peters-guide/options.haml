:ruby
  # :alias => :options

%h1 Options processing


.lefty
  :textile
    The #{page_link "dashboard", :portlets} already looks great.
    
    The widgets need customized titles, though. Being all about encapsulation, Apotomo naturally provides a way to pass options into widgets from outside.
    
%p
  = img "portlet-title.png"

= code "app/controllers/dashboard_controller.rb", :tag => "v6", :lines => 4..7

:textile
  We can provide arbitrary options in the @widget@ method (line 6).

= code "app/cells/trashbin_widget.rb", :tag => "v6"

:markdown
  The widget can subsequently access the `@opts` hash and process its parameters (line 21).

:textile
  Note that we have to call @setup!@ in the start state as well as in the trigger states, as our widget is stateless.

  h2. Using hooks
  
  Fortunately, Apotomo already has a hook for exactly that job.

= code "app/cells/trashbin_widget.rb", :tag => "v7"

:textile
  The @after_initialize@ hook (line 4) will execute all attached callbacks after the widget was created. It is somehow comparable to a @before_filter@ in Rails controllers.
